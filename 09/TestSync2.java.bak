public class TestSync2 implements Runnable
{

	int b = 100;
	//保证的是这个方法在2秒内不能被其他线程访问

	public synchronized void method1() throws Exception
	{	
		System.out.println("此时b =" + b);
		b = 1000;
		//Thread.sleep(2000);
			
		System.out.println("method1：b = " + b);
		
	}
	//method2中加入synchronized关键字后，则在任一时刻只能有一个线程访问这个方法，相当于一把锁
	//有两个方法对同一对象进行访问时，记得要锁上，免得造成麻烦
	public synchronized void method2() throws Exception
	{
		System.out.println("此时 b =" + b);
		Thread.sleep(3000);
		b = 2000;	
		System.out.println("method2: b =" + b);//此方法在不加synchronized之前能对b进行修改，因为锁定的是m1方法，而b是全局变量
	}
	public void run() 
	{
		try
		{
			method1();	
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
				
	}
	public static void main(String[] args) throws Exception
	{
		TestSync2 t1 = new TestSync2();
		Thread test = new Thread(t1);
		test.start();
		//t1.method1();
		t1.method2();
		System.out.println("此时t1中b的值： " + t1.b);
	}
}
